import os
import pandas as pd
import matplotlib.pyplot as plt
from xhtml2pdf import pisa
from io import BytesIO
import base64
import tempfile


def generate_report(df, forecast_df, product_name):
    buffer = BytesIO()
    logo_path = "assets/logo.png"

    # Preprocess
    df['Date'] = pd.to_datetime(df['Date'])
    df.sort_values('Date', inplace=True)

    # Calculate stats
    avg_demand = round(df['Units Sold'].mean(), 2)
    reorder_point = int(avg_demand * 10)
    anomalies = ((df['Units Sold'] - df['Units Sold'].mean()).abs() > 2 * df['Units Sold'].std()).sum()
    store_name = df['Store'].mode()[0] if 'Store' in df.columns else 'N/A'

    # Forecast table
    forecast_preview = forecast_df[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head(7).round(2)
    forecast_preview.rename(columns={
        'ds': 'Date',
        'yhat': 'Forecast',
        'yhat_lower': 'Lower',
        'yhat_upper': 'Upper'
    }, inplace=True)
    forecast_html = forecast_preview.to_html(index=False)

    # Create plot images
    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as f1:
        plt.figure(figsize=(8, 3))
        df.groupby('Date')['Units Sold'].sum().plot(marker='o', linestyle='-')
        plt.title("Daily Demand Trend")
        plt.xlabel("Date")
        plt.ylabel("Units Sold")
        plt.tight_layout()
        plt.savefig(f1.name)
        plt.close()
        demand_img = f1.name

    with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as f2:
        plt.figure(figsize=(6, 3))
        box_by = 'Store' if 'Store' in df.columns else 'Product Name'
        df.boxplot(column='Units Sold', by=box_by)
        plt.title("Demand Distribution")
        plt.suptitle("")
        plt.tight_layout()
        plt.savefig(f2.name)
        plt.close()
        dist_img = f2.name

    # Convert images to base64
    def img_to_base64(path):
        try:
            with open(path, "rb") as img:
                return base64.b64encode(img.read()).decode()
        except:
            return ""

    logo_base64 = img_to_base64(logo_path)
    demand_base64 = img_to_base64(demand_img)
    dist_base64 = img_to_base64(dist_img)

    # HTML Template (no emojis, just clean labels)
    html = f"""
    <html>
    <body style="font-family: Arial, sans-serif;">
        <div style="text-align: center;">
            <img src="data:image/png;base64,{logo_base64}" width="120"/>
            <h1>Forecast Report for {product_name}</h1>
        </div>

        <h2>Summary</h2>
        <ul>
            <li><strong>Product:</strong> {product_name}</li>
            <li><strong>Store:</strong> {store_name}</li>
            <li><strong>Avg Daily Demand:</strong> {avg_demand}</li>
            <li><strong>Reorder Point:</strong> {reorder_point}</li>
            <li><strong>Lead Time:</strong> 7 days</li>
            <li><strong>Anomalies Detected:</strong> {anomalies}</li>
        </ul>

        <h2>Recent Forecast</h2>
        {forecast_html}

        <h2>Visuals</h2>
        <h4>Daily Demand Trend</h4>
        <img src="data:image/png;base64,{demand_base64}" width="550"/>

        <h4>Demand Distribution</h4>
        <img src="data:image/png;base64,{dist_base64}" width="550"/>

        <p style="margin-top: 30px; font-size: small; text-align: center;">
            Generated by DemandIQ â€¢ Forecasting & Inventory Intelligence
        </p>
    </body>
    </html>
    """

    pisa.CreatePDF(BytesIO(html.encode("utf-8")), dest=buffer)

    # Clean temp files
    os.remove(demand_img)
    os.remove(dist_img)

    return buffer
